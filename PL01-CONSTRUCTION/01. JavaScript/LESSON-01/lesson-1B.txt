---------------------------------------------------------------------------
Programming Paradigms 
---------------------------------------------------------------------------
01 programming paradigms are a way to classify programming language based on features
-- languages can be classified into multiple paradigms 
-- some paradigms are concerned mainly with implications for the execution model of 
   the language, such as allowing side effects, or whether the sequence of operations
   is defined by the execution model 
-- other paradigms are concerned mainly with the way that code is organized, 
-- such as grouping a code into units along with the state that is modified by code 
-- yet others are concerned mainly with the style of syntax and grammar 

02 common programming paradigms include 
   - imperative: in which, programmer instructs the machine, how to change its state
      - procedural: which groups instructions into procedures 
      - oop: which groups instructions with the part of the state that operate on 
   - declarative: in which, programmer merely declares properties of desired result, 
     but not how to compute it  
      - functional: in which the desired result is declared as the value of a series
        of function applications 
      - logic: in which the desired result is declared as the answer to a question 
        about a system to facts and rules 
      - mathematical: in which the desired result is declared as the solution of an 
        optimization problem 
      - reactive: in which the desired result is declared with dta streams and the 
        propagation of change 

03 just as software engineering (as a process) is defined by differing methodologies,
   so the programming languages (as models of computation) are defined by differing 
   paradigms 
-- some languages are designed to support one paradigm, like Smalltalk support oop, 
   Haskell supports functional programming, while other programming languages 
   support multiple paradigms such as Object Pascal, C++, Java, JavaScript, C#, 
   Scala, Visual Basic, Common Lisp, Schema, Perl, PHP, Python, Ruby and F#
-- example, programs written in C++, Object Pascal or PHP can be purely procedural,
   purely object-oriented, or can contain elements of both or other paradigms 
-- software designers and programmers decide how to use those paradigm elements 
-- in object-oriented, programs are treated as a set of interacting object
-- in functional, programs are treated as a sequence of stateless function evaluation
-- when programming computers or systems with many processors, in process-oriented 
   programming, programs are treated as sets of concurrent processes 

04 different approaches to programming have developed over time
-- Machine code: the lowest-level programming paradigms, which directly represents 
   the instructions (the contents of program memory) as a sequence of numbers, and 
   assembly language where the machine instructions are represented by mnemonics 
   and memory addresses can be given symbolic labels 
-- these are sometimes called first- and second-generation languages 
-- procedural languages: the next advance was the development of procedural languages
-- these third-generation languages (the first described as high-level languages) use
   vocabulary related to the problem being solved, like - COBOL, FORTRAN, ALGOL, 
   PL/I, BASIC, C all these languages follow the procedural paradigm 
-- following the widespread use of procedural languages, object-oriented programming 
   languages were created, such as Simula, Smalltalk, C++, Python, PHP, Java, C#
-- in these languages, data and methods to manipulate 
   it are kept as one unit called an object
-- with perfect encapsulation, one of the distinguishing features of OOP, the only 
   way that another object or user would be able to access the data is via the 
   object methods, thus an object's inner workings may be changed without affecting 
   any code that uses the object 
-- there is still some controversy concerning the efficacy of the OOP paradigm versus
   the procedural paradigm. the need for every object ot have associative methods 
   leads some skeptics to associate OOP with software bloat, an attempt to resolve 
   this dilemma came through polymorphism 
-- because object-oriented programming is considered a paradigm, not a language, it 
   is possible to create even an object-oriented assembler language 
   High Level Assembly (HLA) is an example of this that fully supports advanced 
   data types and object-oriented assembly language programming - despite its origins

05 Further Paradigms: life-rate programming as a form of (imperative programming), 
   structures programs as a human-centered web, as in a hypertext essay: 
   documentation is integral to the program, and the program is structured following 
   the logic of prose exposition, rather than compiler convenience 
-- independent of the (imperative) branch, (declarative) programming paradigms were 
   developed 
-- programs written using this paradigm use functions, blocks of code intended to 
   behave like (mathematical function)
-- functional languages discourage changes in the value of variables through 
   assignment, making a great deal of use of (recursion) instead 
-- the (logic programming) paradigm views computation as (automated reasoning) over 
   a body of knowledge 
-- facts about th e(problem domain) are expressed as logic formulas, and programs
   are executed by applying (inference rules) over them until an answer to the 
   problem is found, or the set of formulas is proved inconsistent 
-- (symbolic programming) is a paradigm that describes programs able to manipulate 
   formulas and program components as data 
-- programs can thus effectively modify themselves and appear to learn making them 
   suited for applications such as (artificial intelligence, expert systems, 
   natural-language processing) and computer games languages that support this 
   paradigm include (Lisp and Prolog)

06 differentiable programming structures programs so that they can be differentiated
   throughout, usually via (automatic differentiation) 
07 most programming languages support more than one programming paradigm to allow 
   programmers to use the most suitable programming style and associated language 
   constructs for a given job 

---------------------------------------------------------------------------
Thread 
---------------------------------------------------------------------------
01 in computer science, a (thread) of execution is the smallest sequence of
   programmed instructions that can be managed independently by a scheduler, 
   which is typically a part of the operating system 
-- the implementation of threads and processes differs between operating systems
   but in most cases a thread is a component of a process 
-- the multiple threads of a given process may be executed concurrently, 
   sharing resources such as memory, while different processes do not share  
-- in particular, the threads of a process share its executable code 
   and the values of its dynamically allocated variables 
   and no-thread-local global variables at any given time 
   
---------------------------------------------------------------------------
Prototype-Based Programming
---------------------------------------------------------------------------
01 prototype-based programming is a style of (object-oriented) programming 
   in which (classes) are not explicitly defined, 
   but rather derived by adding properties and methods to an instance 
   of another class or less frequently, adding them to an empty object 
-- in simple words, this type of style allows the creating of an object 
   without first defining its class

---------------------------------------------------------------------------
First-class Function 
---------------------------------------------------------------------------
01 a programming language is said to have (first-class functions) 
   when functions in that language are treated like any other variable. 
-- in such a language, 
    - a function can be passed as an argument to other functions,
    - can be returned by another function 
    - and can be assigned as a value to a variable 